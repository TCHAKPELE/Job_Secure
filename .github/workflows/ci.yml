name: Deploy Laravel App

on:
  push:
    branches:
      - main

jobs:
  deploy_backend_and_make_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure SSH
        run: |

          mkdir -p ~/.ssh/
          echo "${{ secrets.AWS_EC2_SSH_KEYS }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{ secrets.FRONTEND_HOST }} >> ~/.ssh/known_hosts

      - name: Clone repository on remote server
        run: |
          ssh ${{ secrets.AWS_EC2_SSH_USER }}@${{ secrets.FRONTEND_HOST }} 'rm -rf ${{ github.event.repository.name }}; git clone git@github.com:${{ github.repository }}.git'

      - name: Setup BACKEND server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.BACKEND_HOST }}
          username: ${{ secrets.AWS_EC2_SSH_USER }}
          port: ${{ secrets.AWS_EC2_SSH_PORT }}
          key: ${{ secrets.AWS_EC2_SSH_KEYS }}
          script: |

            # Install MySQL Server
            sudo apt update
            sudo apt install -y mysql-server

            # Create laravel database, grant privileges to the root user
            sudo mysql -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} -e "DROP DATABASE IF EXISTS laravel; CREATE DATABASE laravel;"
            sudo mysql -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} -e "CREATE USER '${{ secrets.DB_APPUSER }}'@'%' IDENTIFIED BY '${{ secrets.MYSQL_PASSWORD }}'; GRANT ALL PRIVILEGES ON *.* TO '${{ secrets.DB_APPUSER }}'@'%' WITH GRANT OPTION; FLUSH PRIVILEGES;"

            # Configure MySQL to listen on all IP addresses
            sudo sed -i 's/^bind-address/#bind-address/' /etc/mysql/mysql.conf.d/mysqld.cnf

            # Update firewall rules to allow incoming MySQL connections
            sudo ufw allow mysql

            # Restart MySQL service
            sudo systemctl restart mysql
      
        
  deploy_frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure SSH
        run: |

          mkdir -p ~/.ssh/
          echo "${{ secrets.AWS_EC2_SSH_KEYS }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{ secrets.FRONTEND_HOST }} >> ~/.ssh/known_hosts

      - name: Setup FRONTEND server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.FRONTEND_HOST }}
          username: ${{ secrets.AWS_EC2_SSH_USER }}
          port: ${{ secrets.AWS_EC2_SSH_PORT }}
          key: ${{ secrets.AWS_EC2_SSH_KEYS }}
          script: |

            # Copy repository to remote server
            mkdir /home/${{ secrets.AWS_EC2_SSH_USER }}/${{ github.event.repository.name }}
            cp -r ${{ github.workspace }} ~/${{ github.event.repository.name }}

            # Update and install and required packages
            sudo apt update
            sudo apt install -y nginx mysql-server 
            sudo apt-get --purge remove php8.1-common
            sudo apt install -y php8.1-fpm php8.1 php8.1-mysql php8.1-dom php8.1-curl php8.1-xml php8.1-mbstring composer php8.1-common php8.1-cli 
            sudo apt-get install -y nodejs npm
            sudo a2enmod rewrite

            # Uncomment required extensions
            sudo sed -i 's/^\(;extension=dom\)/extension=dom/' /etc/php/8.1/cli/php.ini
            sudo sed -i 's/^\(;extension=curl\)/extension=curl/' /etc/php/8.1/cli/php.ini
            sudo sed -i 's/^\(;extension=xml\)/extension=xml/' /etc/php/8.1/cli/php.ini
            sudo sed -i 's/^\(;extension=pdo_mysql\)/extension=pdo_mysql/' /etc/php/8.1/cli/php.ini

            # Install Node
            curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
            sudo apt-get install -y nodejs

            # Set the document root of nginx web server to /var/www/html/public
            sudo tee /etc/nginx/sites-available/default > /dev/null <<END_OF_FILE
            server {
                listen 80 default_server;
                listen [::]:80 default_server;

                root /var/www/html/public;
                index index.php index.html index.htm;

                server_name _;

                location / {
                    try_files \$uri \$uri/ /index.php?\$query_string;
                }

                location ~ \.php$ {
                    include snippets/fastcgi-php.conf;
                    fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
                    fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
                    include fastcgi_params;
                }
            }
            END_OF_FILE

            # Configure PHP
            sudo sed -i 's/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/' /etc/php/8.1/fpm/php.ini

            cd Job_Secure

            # Update DB parameters in .env file
            sudo cp .env.example .env
            sudo sed -i "s/DB_PASSWORD=.*/DB_PASSWORD=${{ secrets.MYSQL_PASSWORD }}/" ./.env
            sudo sed -i "s/DB_USERNAME=.*/DB_USERNAME=${{ secrets.DB_APPUSER }}/" ./.env
            sudo grep -q '^DB_STRICT_MODE=' ./.env && sudo ed -i 's/^DB_STRICT_MODE=.*/DB_STRICT_MODE=false/' ./.env || sudo sh -c 'echo "DB_STRICT_MODE=false" >> ./.env'
            sudo sed -i "s/DB_HOST=.*/DB_HOST=${{ secrets.DB_HOST }}/" ./.env

            # Update and install PHP dependencies
            composer update
            composer install --no-dev --no-interaction --prefer-dist --optimize-autoloader

            # Installs the dependencies and run build script defined in the package.json
            npm install
            npm run build

            # Move built files to web server directory, setup proper permissions
            sudo rsync -avz --exclude='node_modules' --exclude='Dockerfile' ./ /var/www/html/
            sudo chown -R www-data:www-data /var/www/html
            sudo chmod -R 755 /var/www/html/storage
            sudo chmod o+w ./storage/ -R
            sudo usermod -aG www-data ubuntu
            cd /var/www/html/

            # Generate APP_KEY
            KEY=$(php artisan key:generate --show)
            sudo sed -i "s#^\(APP_KEY=\).*\$#\1$KEY#" ./.env

            # Fix  "Invalid default value for 'date_creation'" error
            sudo sed -i "s/->date('date_creation')->default(DB::raw('CURRENT_TIMESTAMP'));/->date('date_creation')->nullable()->default(null);/" database/migrations/*.php
            sudo sed -i "s/->date('date_paiement')->default(DB::raw('CURRENT_TIMESTAMP'));/->date('date_creation')->nullable()->default(null);/" database/migrations/*.php

            # Clear cache, cache configuration, and create a symbolic link for file serving.
            sudo php artisan cache:clear
            sudo php artisan config:cache
            sudo php artisan storage:link

            # Enable PHP info page
            sudo sh -c "echo '<?php\nphpinfo();' > public/phpinfo.php"

            # Restart services 
            sudo systemctl restart php8.1-fpm.service

            # Stop and disable Apache2 service
            sudo systemctl stop apache2
            sudo systemctl disable apache2

            # Start and enable Nginx service
            sudo systemctl enable --now nginx

            # Migrate database
            (sudo php artisan down) || true
            sudo php artisan migrate --seed --force
            sudo php artisan optimize
            sudo php artisan up

            # Make test
            sudo php artisan test
     

  build_and_deploy:
    runs-on: ubuntu-latest
    needs: [deploy_backend_and_make_test, deploy_frontend]
    steps:
      - name: Build and Deploy
        run: echo "Build and deploy steps go here"
